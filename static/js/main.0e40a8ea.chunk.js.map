{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovie","state","errors","titleError","empty","imgUrlError","imdbUrlError","imdbIdError","validation","hasErrors","Object","keys","indexOf","error","length","isRequiredFieldsFilled","filter","field","every","handleSubmit","event","preventDefault","props","onAdd","setState","validateField","target","name","value","saveErrors","forField","typeOfError","message","prevState","cloneDeep","concat","clearEmptyErrorForField","hangleField","this","onSubmit","htmlFor","type","id","onChange","onBlur","Component","App","moviesFromServer","addMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e40a8ea.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewMovie.scss';\nimport cloneDeep from 'lodash/cloneDeep';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    errors: {\n      titleError: {\n        empty: '',\n      },\n      imgUrlError: {\n        empty: '',\n      },\n      imdbUrlError: {\n        empty: '',\n      },\n      imdbIdError: {\n        empty: '',\n      },\n    },\n    validation: false,\n  }\n\n  hasErrors = () => {\n    const { errors } = this.state;\n    const arrOfErrors = Object.keys(errors);\n\n    return arrOfErrors.indexOf(error => error.empty.length > 0) !== -1;\n  }\n\n  isRequiredFieldsFilled = () => {\n    const arrOfFields = Object.keys(this.state);\n    const requiredFields = arrOfFields.filter((field) => {\n      return field !== 'errors'\n        && field !== 'description'\n        && field !== 'validation';\n    });\n\n    return requiredFields.every(field => this.state[field].length > 0);\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title, description, imgUrl, imdbUrl, imdbId } = this.state;\n\n    if (!title && !imgUrl && !imdbUrl && !imdbId) {\n      return;\n    }\n\n    this.props.onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  }\n\n  validateField = (event) => {\n    const field = event.target.name;\n\n    if (event.target.value.length === 0) {\n      this.saveErrors(field, 'empty', 'is required');\n    }\n\n    if (!this.hasErrors() && this.isRequiredFieldsFilled()) {\n      this.setState({ validation: true });\n    }\n  }\n\n  saveErrors = (forField, typeOfError, message) => {\n    this.setState(prevState => ({\n      ...cloneDeep(prevState),\n      errors: {\n        ...prevState.errors,\n        [forField.concat('Error')]: { [typeOfError]: message },\n      },\n    }));\n  }\n\n  clearEmptyErrorForField = (field) => {\n    const { errors } = this.state;\n\n    if (errors[field.concat('Error')]?.empty.length > 0) {\n      errors[field.concat('Error')].empty = '';\n    }\n  }\n\n  hangleField = (event) => {\n    const field = event.target.name;\n\n    this.setState({ [field]: event.target.value });\n    this.clearEmptyErrorForField(field);\n  }\n\n  render() {\n    const { title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId } = this.state;\n\n    const { titleError,\n      imgUrlError,\n      imdbUrlError,\n      imdbIdError } = this.state.errors;\n\n    return (\n      <form\n        onSubmit={this.handleSubmit}\n        className=\"form\"\n      >\n        <fieldset>\n          <legend>New film informanition:</legend>\n          <div className=\"field\">\n            <label htmlFor=\"title\">Title:&nbsp;</label>\n            <input\n              type=\"text\"\n              id=\"title\"\n              name=\"title\"\n              value={title}\n              onChange={this.hangleField}\n              onBlur={this.validateField}\n            />\n            {titleError.empty && (\n              <span className=\"error\">{titleError.empty}</span>\n            )}\n          </div>\n          <div className=\"field\">\n            <label htmlFor=\"description\">Description:&nbsp;</label>\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              className=\"description\"\n              value={description}\n              onChange={this.hangleField}\n            />\n          </div>\n          <div className=\"field\">\n            <label htmlFor=\"imgUrl\">imgUrl:&nbsp;</label>\n            <input\n              type=\"text\"\n              id=\"imgUrl\"\n              name=\"imgUrl\"\n              value={imgUrl}\n              onChange={this.hangleField}\n              onBlur={this.validateField}\n            />\n            {imgUrlError.empty && (\n              <span className=\"error\">{imgUrlError.empty}</span>\n            )}\n          </div>\n          <div className=\"field\">\n            <label htmlFor=\"imdbUrl\">imdbUrl:&nbsp;</label>\n            <input\n              type=\"text\"\n              id=\"imdbUrl\"\n              name=\"imdbUrl\"\n              value={imdbUrl}\n              onChange={this.hangleField}\n              onBlur={this.validateField}\n            />\n            {imdbUrlError.empty && (\n              <span className=\"error\">{imdbUrlError.empty}</span>\n            )}\n          </div>\n          <div className=\"field\">\n            <label htmlFor=\"imdbId\">imdbId:&nbsp;</label>\n            <input\n              type=\"text\"\n              id=\"imdbId\"\n              name=\"imdbId\"\n              value={imdbId}\n              onChange={this.hangleField}\n              onBlur={this.validateField}\n            />\n            {imdbIdError.empty && (\n              <span className=\"error\">{imdbIdError.empty}</span>\n            )}\n          </div>\n        </fieldset>\n        <button\n          type=\"submit\"\n          className=\"btn\"\n        >\n          Add a film\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [\n        ...state.movies,\n        movie,\n      ],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie onAdd={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}